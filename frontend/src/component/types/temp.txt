import cron from "node-cron";
import mysql from "mysql2/promise";
import dayjs from "dayjs";

const db = await mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "yourpassword",
  database: "timesheetdb",
});

// ðŸ—“ Function to calculate next period
async function updatePeriod(periodType: "weekly" | "bi-monthly" | "monthly") {
  const startDate = dayjs();
  let endDate;

  if (periodType === "weekly") {
    endDate = startDate.endOf("week");
  } else if (periodType === "bi-monthly") {
    const day = startDate.date() <= 15 ? 15 : startDate.daysInMonth();
    endDate = startDate.date(day).endOf("day");
  } else {
    endDate = startDate.endOf("month");
  }

  await db.execute(
    `INSERT INTO timesheet_periods (period_type, start_date, end_date) VALUES (?, ?, ?)`,
    [periodType, startDate.format("YYYY-MM-DD"), endDate.format("YYYY-MM-DD")]
  );

  console.log(
    `âœ… Timesheet updated: ${startDate.format("YYYY-MM-DD")} â†’ ${endDate.format("YYYY-MM-DD")}`
  );
}

// ðŸ•’ Schedulers
cron.schedule("0 0 * * 0", () => updatePeriod("weekly")); // every Sunday
cron.schedule("0 0 1,15 * *", () => updatePeriod("bi-monthly")); // 1st and 15th
cron.schedule("0 0 L * *", () => updatePeriod("monthly")); // last day of month
// CREATE TABLE timesheet_periods (
//   id INT AUTO_INCREMENT PRIMARY KEY,
//   period_type ENUM('weekly','bi-monthly','monthly') NOT NULL,
//   start_date DATE NOT NULL,
//   end_date DATE NOT NULL,
//   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// );

// Helper to check if a date is a weekday (Mon-Fri)
export function isWeekday(date: Date): boolean {
  const day = date.getDay();
  return day >= 1 && day <= 5;
}

// Helper to check if a date is a holiday
export function isHoliday(dateStr: DateString, holidays: Holiday[]): boolean {
  return holidays.some((h) => h.date === dateStr);
}

// Helper to get weekend dates in a range
export function getWeekendDates(start: Date, end: Date): DateString[] {
  const weekendDates: DateString[] = [];
  for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
    if (!isWeekday(d)) {
      weekendDates.push(toDateString(d));
    }
  }
  return weekendDates;
}

// Helper to convert Date to ISO date string
export function toDateString(date: Date): DateString {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}
app.get("/timesheet/period", async (req, res) => {
  const [rows] = await db.execute(
    "SELECT * FROM timesheet_periods ORDER BY id DESC LIMIT 1"
  );
  res.json(rows[0]);
});
